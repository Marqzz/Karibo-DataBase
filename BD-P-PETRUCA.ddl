-- Generated by Oracle SQL Developer Data Modeler 21.2.0.183.1957
--   at:        2021-12-23 17:56:28 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE cantitate (
    id_cantitate NUMBER(2) NOT NULL,
    cantitate_ml NUMBER(3) NOT NULL
)
LOGGING;

ALTER TABLE cantitate
    ADD CHECK ( cantitate_ml IN ( 30, 50, 75, 100 ) );

ALTER TABLE cantitate ADD CONSTRAINT cantitate_pk PRIMARY KEY ( id_cantitate );

CREATE TABLE clienti (
    id_client      NUMBER(3) NOT NULL,
    nume_client    VARCHAR2(12) NOT NULL,
    prenume_client VARCHAR2(12) NOT NULL
)
LOGGING;

ALTER TABLE clienti
    ADD CHECK ( length(nume_client) > 2
                AND REGEXP_LIKE ( nume_client,
                                  '^[A-Za-z]+$' ) );

ALTER TABLE clienti
    ADD CHECK ( length(prenume_client) > 2
                AND REGEXP_LIKE ( prenume_client,
                                  '^[A-Za-z]+$' ) );

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( id_client );

CREATE TABLE comanda (
    id_comanda        NUMBER(3) NOT NULL,
    clienti_id_client NUMBER(3) NOT NULL,
    data_comanda      DATE NOT NULL
)
LOGGING;

ALTER TABLE comanda ADD CONSTRAINT comanda_pk PRIMARY KEY ( id_comanda,
                                                            clienti_id_client );

CREATE TABLE cont_client (
    clienti_id_client NUMBER(3) NOT NULL,
    cnp               CHAR(13) NOT NULL,
    sold              NUMBER(3) NOT NULL,
    oras_client       VARCHAR2(20)
)
LOGGING;

ALTER TABLE cont_client
    ADD CHECK ( ( substr(cnp, 1, 1) BETWEEN 1 AND 8 )
                AND ( substr(cnp, 2, 2) IN ( 00, 01, 02,
                                             03, 04, 05, 06, 07,
                                             08, 09 )
                      OR substr(cnp, 2, 2) BETWEEN 10 AND 99 )
                AND ( substr(cnp, 4, 2) IN ( 01, 02, 03,
                                             04, 05, 06, 07, 08,
                                             09, 10, 11, 12 ) )
                AND ( substr(cnp, 6, 2) IN ( 01, 02, 03,
                                             04, 05, 06, 07, 08,
                                             09 )
                      OR substr(cnp, 6, 2) BETWEEN 10 AND 31 )
                AND ( substr(cnp, 8, 2) IN ( 01, 02, 03,
                                             04, 05, 06, 07, 08,
                                             09, 51, 52 )
                      OR substr(cnp, 8, 2) BETWEEN 10 AND 46 ) );

ALTER TABLE cont_client ADD CHECK ( sold BETWEEN 1 AND 9999 );

ALTER TABLE cont_client
    ADD CHECK ( length(oras_client) > 2
                AND REGEXP_LIKE ( oras_client,
                                  '^[A-Za-z]+$' ) );

ALTER TABLE cont_client ADD CONSTRAINT cont_client_pk PRIMARY KEY ( clienti_id_client );

ALTER TABLE cont_client ADD CONSTRAINT cont_client_cnp_un UNIQUE ( cnp );

CREATE TABLE istoric_comenzi (
    comanda_id_comanda NUMBER(3) NOT NULL,
    comanda_id_client  NUMBER(3) NOT NULL,
    parfum_id_parfum   NUMBER(3) NOT NULL,
    nr_produse         NUMBER(1) NOT NULL
)
LOGGING;

ALTER TABLE istoric_comenzi
    ADD CONSTRAINT rel_comanda_parfum_pk PRIMARY KEY ( comanda_id_comanda,
                                                       comanda_id_client,
                                                       parfum_id_parfum );

CREATE TABLE marca (
    id_marca   NUMBER(2) NOT NULL,
    nume_marca VARCHAR2(15) NOT NULL
)
LOGGING;

ALTER TABLE marca
    ADD CHECK ( length(nume_marca) >= 2 );

ALTER TABLE marca ADD CONSTRAINT marca_pk PRIMARY KEY ( id_marca );

ALTER TABLE marca ADD CONSTRAINT marca_nume_marca_un UNIQUE ( nume_marca );

CREATE TABLE miros (
    id_miros       NUMBER(2) NOT NULL,
    denumire_miros VARCHAR2(15) NOT NULL
)
LOGGING;

ALTER TABLE miros
    ADD CHECK ( length(denumire_miros) >= 2 );

ALTER TABLE miros ADD CONSTRAINT miros_pk PRIMARY KEY ( id_miros );

CREATE TABLE parfum (
    id_parfum              NUMBER(3) NOT NULL,
    denumire_parfum        VARCHAR2(15) NOT NULL,
    tip_parfum             VARCHAR2(10) NOT NULL,
    pret_parfum            FLOAT(2) NOT NULL,
    marca_id_marca         NUMBER(2) NOT NULL,
    cantitate_id_cantitate NUMBER(2) NOT NULL,
    miros_id_miros         NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE parfum
    ADD CHECK ( length(denumire_parfum) >= 2 );

ALTER TABLE parfum
    ADD CHECK ( tip_parfum IN ( 'B', 'F' ) );

ALTER TABLE parfum ADD CHECK ( pret_parfum BETWEEN 20 AND 999 );

ALTER TABLE parfum ADD CONSTRAINT parfum_pk PRIMARY KEY ( id_parfum );

ALTER TABLE comanda
    ADD CONSTRAINT comanda_clienti_fk FOREIGN KEY ( clienti_id_client )
        REFERENCES clienti ( id_client )
    NOT DEFERRABLE;

ALTER TABLE cont_client
    ADD CONSTRAINT cont_client_clienti_fk FOREIGN KEY ( clienti_id_client )
        REFERENCES clienti ( id_client )
    NOT DEFERRABLE;

ALTER TABLE parfum
    ADD CONSTRAINT parfum_cantitate_fk FOREIGN KEY ( cantitate_id_cantitate )
        REFERENCES cantitate ( id_cantitate )
    NOT DEFERRABLE;

ALTER TABLE parfum
    ADD CONSTRAINT parfum_marca_fk FOREIGN KEY ( marca_id_marca )
        REFERENCES marca ( id_marca )
    NOT DEFERRABLE;

ALTER TABLE parfum
    ADD CONSTRAINT parfum_miros_fk FOREIGN KEY ( miros_id_miros )
        REFERENCES miros ( id_miros )
    NOT DEFERRABLE;

ALTER TABLE istoric_comenzi
    ADD CONSTRAINT rel_comanda_parfum_comanda_fk FOREIGN KEY ( comanda_id_comanda,
                                                               comanda_id_client )
        REFERENCES comanda ( id_comanda,
                             clienti_id_client )
    NOT DEFERRABLE;

ALTER TABLE istoric_comenzi
    ADD CONSTRAINT rel_comanda_parfum_parfum_fk FOREIGN KEY ( parfum_id_parfum )
        REFERENCES parfum ( id_parfum )
    NOT DEFERRABLE;

CREATE SEQUENCE cantitate_id_cantitate_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cantitate_id_cantitate_trg BEFORE
    INSERT ON cantitate
    FOR EACH ROW
    WHEN ( new.id_cantitate IS NULL )
BEGIN
    :new.id_cantitate := cantitate_id_cantitate_seq.nextval;
END;
/

CREATE SEQUENCE clienti_id_client_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER clienti_id_client_trg BEFORE
    INSERT ON clienti
    FOR EACH ROW
    WHEN ( new.id_client IS NULL )
BEGIN
    :new.id_client := clienti_id_client_seq.nextval;
END;
/

CREATE SEQUENCE comanda_id_comanda_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER comanda_id_comanda_trg BEFORE
    INSERT ON comanda
    FOR EACH ROW
    WHEN ( new.id_comanda IS NULL )
BEGIN
    :new.id_comanda := comanda_id_comanda_seq.nextval;
END;
/

CREATE SEQUENCE marca_id_marca_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER marca_id_marca_trg BEFORE
    INSERT ON marca
    FOR EACH ROW
    WHEN ( new.id_marca IS NULL )
BEGIN
    :new.id_marca := marca_id_marca_seq.nextval;
END;
/

CREATE SEQUENCE miros_id_miros_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER miros_id_miros_trg BEFORE
    INSERT ON miros
    FOR EACH ROW
    WHEN ( new.id_miros IS NULL )
BEGIN
    :new.id_miros := miros_id_miros_seq.nextval;
END;
/

CREATE SEQUENCE parfum_id_parfum_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER parfum_id_parfum_trg BEFORE
    INSERT ON parfum
    FOR EACH ROW
    WHEN ( new.id_parfum IS NULL )
BEGIN
    :new.id_parfum := parfum_id_parfum_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER data_comanda_trg
BEFORE INSERT OR UPDATE ON Comanda
FOR EACH ROW
BEGIN
IF( :new.data_comanda > SYSDATE )
THEN
RAISE_APPLICATION_ERROR( -20001,'Data invalida: ' || TO_CHAR( :new.data_comanda, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai mica decat data curenta.' );
END IF;
END;
/

alter table cont_client modify sold numeric(5);

alter table parfum modify pret_parfum numeric(5);

CREATE OR REPLACE TRIGGER change_stoc_trg
 BEFORE INSERT OR UPDATE ON istoric_comenzi
 FOR EACH ROW
BEGIN
 UPDATE cont_client
  SET cont_client.sold = cont_client.sold - :NEW.nr_produse * (select pret_parfum from parfum where id_parfum = :NEW.parfum_id_parfum )
 WHERE clienti_id_client =  :NEW.comanda_id_client
and sold >= sold - :NEW.nr_produse * (select p.pret_parfum from parfum p where p.id_parfum = :NEW.parfum_id_parfum);
 IF NOT SQL%FOUND THEN 
   raise_application_error(-20001,'Nu exista fonduri sufieciente...');
 END IF;
END;
/

-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             0
-- ALTER TABLE                             28
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          6
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
